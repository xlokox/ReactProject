#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

console.log('üöÄ Setting up E-commerce Mobile App with Backend Connectivity...\n');

// Function to get local IP address
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      if (interface.family === 'IPv4' && !interface.internal) {
        return interface.address;
      }
    }
  }
  return 'localhost';
}

// Function to update IP in files
function updateIPInFile(filePath, oldIP, newIP) {
  try {
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');
      content = content.replace(new RegExp(oldIP, 'g'), newIP);
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ Updated IP in ${filePath}`);
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå Error updating ${filePath}:`, error.message);
  }
}

// Main setup function
function setup() {
  try {
    // Get local IP
    const localIP = getLocalIP();
    console.log(`üåê Detected local IP: ${localIP}`);

    // Files to update
    const filesToUpdate = [
      'src/api/api.js',
      'src/services/socketService.js'
    ];

    // Update IP addresses in files
    console.log('\nüìù Updating IP addresses in configuration files...');
    filesToUpdate.forEach(file => {
      updateIPInFile(file, '192.168.1.100', localIP);
      updateIPInFile(file, 'localhost', localIP);
    });

    // Check if backend is running
    console.log('\nüîç Checking backend server...');
    try {
      const response = execSync(`curl -s http://${localIP}:5001/api/test`, { encoding: 'utf8' });
      const data = JSON.parse(response);
      if (data.success) {
        console.log('‚úÖ Backend server is running and accessible!');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Backend server not accessible. Make sure to start it with:');
      console.log('   cd ../backend && npm start');
    }

    // Installation instructions
    console.log('\nüì¶ Next steps:');
    console.log('1. Install dependencies: npm install');
    console.log('2. Start backend server: cd ../backend && npm start');
    console.log('3. Start mobile app: npm start');
    console.log('4. Scan QR code with Expo Go app');
    console.log('\nüéâ Setup complete! Your app is ready for full backend connectivity.');

  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  }
}

// Run setup
setup();
