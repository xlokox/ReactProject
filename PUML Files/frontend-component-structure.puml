@startuml Frontend Component Structure
!theme plain
skinparam backgroundColor #f8f9fa

title React Frontend Component Architecture

package "Customer App" {
    [App.jsx] as CustomerApp
    
    package "Pages" {
        [Home] as CustomerHome
        [Shop] as Shop
        [ProductDetails] as ProductDetails
        [Cart] as Cart
        [Checkout] as Checkout
        [Login] as CustomerLogin
        [Register] as CustomerRegister
        [Profile] as CustomerProfile
        [Orders] as CustomerOrders
    }
    
    package "Components" {
        [Header] as CustomerHeader
        [Footer] as CustomerFooter
        [ProductCard] as ProductCard
        [SearchBar] as SearchBar
        [CategoryFilter] as CategoryFilter
        [PaymentForm] as PaymentForm
        [ChatWidget] as ChatWidget
    }
}

package "Dashboard App" {
    [App.jsx] as DashboardApp
    
    package "Auth Components" {
        [Login] as DashLogin
        [Register] as DashRegister
        [AdminLogin] as DashAdminLogin
    }
    
    package "Layout Components" {
        [MainLayout] as MainLayout
        [Header] as DashHeader
        [Sidebar] as Sidebar
    }
    
    package "Seller Components" {
        [SellerDashboard] as SellerDashboard
        [AddProduct] as AddProduct
        [Products] as Products
        [Orders] as SellerOrders
        [Analytics] as SellerAnalytics
        [Profile] as SellerProfile
        [ChatSupport] as SellerChat
    }
    
    package "Admin Components" {
        [AdminDashboard] as AdminDashboard
        [ManageUsers] as ManageUsers
        [ManageProducts] as ManageProducts
        [ManageOrders] as ManageOrders
        [Categories] as Categories
        [Analytics] as AdminAnalytics
        [ChatSellers] as AdminChat
    }
}

package "Shared Components" {
    [Button] as Button
    [Input] as Input
    [Modal] as Modal
    [Loading] as Loading
    [ErrorBoundary] as ErrorBoundary
    [ProtectedRoute] as ProtectedRoute
}

package "State Management" {
    [Redux Store] as Store
    [Auth Slice] as AuthSlice
    [Product Slice] as ProductSlice
    [Cart Slice] as CartSlice
    [Order Slice] as OrderSlice
    [Chat Slice] as ChatSlice
}

package "Services" {
    [API Service] as APIService
    [Auth Service] as AuthService
    [Socket Service] as SocketService
    [Payment Service] as PaymentServiceFE
}

package "Utils" {
    [Constants] as Constants
    [Helpers] as Helpers
    [Validators] as Validators
}

' Customer App relationships
CustomerApp --> CustomerHome
CustomerApp --> Shop
CustomerApp --> ProductDetails
CustomerApp --> Cart
CustomerApp --> Checkout

CustomerHome --> ProductCard
Shop --> ProductCard
Shop --> CategoryFilter
Shop --> SearchBar

ProductDetails --> PaymentForm
Cart --> PaymentForm
Checkout --> PaymentForm

' Dashboard App relationships
DashboardApp --> MainLayout
MainLayout --> DashHeader
MainLayout --> Sidebar

MainLayout --> SellerDashboard
MainLayout --> AdminDashboard

SellerDashboard --> AddProduct
SellerDashboard --> Products
SellerDashboard --> SellerOrders

AdminDashboard --> ManageUsers
AdminDashboard --> ManageProducts
AdminDashboard --> Categories

' Shared dependencies
CustomerApp --> Store
DashboardApp --> Store

Store --> AuthSlice
Store --> ProductSlice
Store --> CartSlice

CustomerApp --> APIService
DashboardApp --> APIService

APIService --> AuthService
APIService --> SocketService

note right of Store
  Centralized state management
  using Redux Toolkit
end note

note right of ProtectedRoute
  Route protection based on
  authentication and roles
end note

note right of SocketService
  Real-time communication
  using Socket.IO
end note

@enduml
