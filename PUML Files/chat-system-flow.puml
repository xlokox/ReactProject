@startuml Chat System Flow
!theme plain
skinparam backgroundColor #f8f9fa

title Real-time Chat System Flow

actor Customer
actor Seller
actor Admin
participant "Frontend" as Frontend
participant "Chat Service" as ChatService
participant "Socket.IO Server" as SocketIO
participant "Database" as DB

== Socket Connection ==
Customer -> Frontend: Open chat
Frontend -> SocketIO: Connect to socket
SocketIO -> ChatService: Handle connection
ChatService -> DB: Store user session
ChatService -> SocketIO: Emit user online status
SocketIO -> Frontend: Connection established

== Customer to Seller Chat ==
Customer -> Frontend: Send message to seller
Frontend -> SocketIO: Emit message event
SocketIO -> ChatService: Process message
ChatService -> DB: Save message
ChatService -> DB: Find target seller
ChatService -> SocketIO: Emit to seller's room
SocketIO -> Seller: Deliver message
Seller -> Frontend: Receive message notification

== Seller Response ==
Seller -> Frontend: Reply to customer
Frontend -> SocketIO: Emit reply
SocketIO -> ChatService: Process reply
ChatService -> DB: Save reply
ChatService -> SocketIO: Emit to customer's room
SocketIO -> Customer: Deliver reply

== Seller to Admin Chat ==
Seller -> Frontend: Contact admin support
Frontend -> SocketIO: Emit admin message
SocketIO -> ChatService: Process admin message
ChatService -> DB: Save message
ChatService -> SocketIO: Emit to admin room
SocketIO -> Admin: Deliver message

== Chat History ==
Customer -> Frontend: Load chat history
Frontend -> ChatService: GET /api/chat/history/:sellerId
ChatService -> DB: Query message history
DB -> ChatService: Return messages
ChatService -> Frontend: Chat history
Frontend -> Customer: Display messages

== Online Status ==
Frontend -> SocketIO: User comes online
SocketIO -> ChatService: Update user status
ChatService -> DB: Update online status
ChatService -> SocketIO: Broadcast status update
SocketIO -> Frontend: Update UI for online users

== Message Delivery Status ==
ChatService -> DB: Mark message as delivered
ChatService -> SocketIO: Emit delivery confirmation
SocketIO -> Frontend: Update message status
Frontend -> Customer: Show delivery indicator

== Typing Indicators ==
Customer -> Frontend: Start typing
Frontend -> SocketIO: Emit typing event
SocketIO -> Seller: Show typing indicator
Seller -> Frontend: Display "Customer is typing..."

Customer -> Frontend: Stop typing
Frontend -> SocketIO: Emit stop typing
SocketIO -> Seller: Hide typing indicator

== Disconnect Handling ==
Customer -> Frontend: Close chat/browser
Frontend -> SocketIO: Disconnect
SocketIO -> ChatService: Handle disconnect
ChatService -> DB: Update offline status
ChatService -> SocketIO: Broadcast offline status

@enduml
