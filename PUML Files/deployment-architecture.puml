@startuml Deployment Architecture
!theme plain
skinparam backgroundColor #f8f9fa

title E-commerce System Deployment Architecture

package "Frontend Deployment" {
    node "Vercel/Netlify" as Frontend {
        [Customer React App] as CustomerApp
        [Dashboard React App] as DashboardApp
    }
}

package "Backend Deployment" {
    node "Heroku/Railway" as Backend {
        [Node.js Server] as NodeServer
        [Express.js API] as ExpressAPI
        [Socket.IO Server] as SocketServer
    }
}

package "Database Services" {
    cloud "MongoDB Atlas" as MongoDB {
        database "Production DB" as ProdDB
        database "Development DB" as DevDB
    }
}

package "External Services" {
    cloud "Cloudinary" as Cloudinary {
        [Image Storage] as ImageStorage
        [Image Transformation] as ImageTransform
    }
    
    cloud "Stripe" as Stripe {
        [Payment Processing] as PaymentProc
        [Webhook Handling] as WebhookHandle
    }
    
    cloud "SendGrid/Mailgun" as EmailService {
        [Email Delivery] as EmailDelivery
        [Template Management] as EmailTemplates
    }
}

package "CDN & Security" {
    cloud "Cloudflare" as CDN {
        [Content Delivery] as ContentDelivery
        [DDoS Protection] as DDoSProtection
        [SSL/TLS] as SSL
    }
}

package "Monitoring & Analytics" {
    cloud "Monitoring Services" as Monitoring {
        [Application Monitoring] as AppMonitoring
        [Error Tracking] as ErrorTracking
        [Performance Analytics] as PerfAnalytics
    }
}

' Frontend connections
CustomerApp --> CDN : "Static Assets"
DashboardApp --> CDN : "Static Assets"

' Frontend to Backend
CustomerApp --> Backend : "API Calls"
DashboardApp --> Backend : "API Calls"
CustomerApp --> SocketServer : "WebSocket"
DashboardApp --> SocketServer : "WebSocket"

' Backend connections
NodeServer --> MongoDB : "Database Operations"
ExpressAPI --> MongoDB : "CRUD Operations"

' External service connections
NodeServer --> Cloudinary : "Image Upload/Management"
NodeServer --> Stripe : "Payment Processing"
NodeServer --> EmailService : "Email Notifications"

' CDN and Security
Frontend --> CDN : "Content Delivery"
Backend --> CDN : "API Caching"

' Monitoring
NodeServer --> Monitoring : "Logs & Metrics"
Frontend --> Monitoring : "Error Tracking"

note right of Frontend
  Static hosting for React apps
  Automatic deployments from Git
  Global CDN distribution
end note

note right of Backend
  Containerized Node.js deployment
  Auto-scaling capabilities
  Environment variable management
end note

note right of MongoDB
  Managed database service
  Automatic backups
  Global clusters
end note

note right of Cloudinary
  Image and video management
  On-the-fly transformations
  CDN delivery
end note

note right of Stripe
  PCI-compliant payment processing
  Multiple payment methods
  Webhook notifications
end note

note right of CDN
  Global content delivery
  DDoS protection
  SSL termination
end note

@enduml
